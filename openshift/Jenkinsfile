pipeline {
 
    agent any
 
    environment {
        PATH = "$PATH:/opt/openshift-client"
        CLUSTER_NAME = "minishift"
        PROJECT_NAME = "yann-dev"
        CREATE_APP = 'false'
        TEMPLATE_URL = ""
        PIPE_TIME_OUT = 20
        LIST_BUILD = 'mvn-greeting'
//        LIST_BUILD = 'mvn-greeting,mvn-living,mvn-app,my-java-app'

        // for Build Info Creator
        ART_URL="http://192.168.51.51:8081/artifactory/"
        ART_USER="admin"
        ART_PASS="password"    
    }  

    stages {

        stage('preamble') {
            steps {
                script {
                    openshift.withCluster(env.CLUSTER_NAME) {
                        openshift.withProject(env.PROJECT_NAME) {
                            echo "Using project: ${openshift.project()}"
                        }
                    }
                }
            }
        }
        
        stage('build App') {
            steps {
                script {
                    openshift.withCluster(env.CLUSTER_NAME) {
                        openshift.withProject(env.PROJECT_NAME) {
                            def build_names = "${LIST_BUILD}".split(',');
                            for (build in build_names)  {
                                timeout(env.PIPE_TIME_OUT) { 
                                    echo "checking ${build} ..."
                                    openshift.startBuild(build).untilEach(1) {
                                        echo "build: ${it.name()}, status: ${it.object().status.phase}"
                                        return (it.object().status.phase == "Complete")
                                    }
                                } // end timeout
                            } // end for
                        }
                    }
                } // end script
            } // end steps
        } // en stage 
    
        stage('Generate and Publish Build Info') {
            steps {
                sh 'echo Generate'
/*
                rtDownload (
                    serverId: 'arty-7',
                    spec: '''{
                          "files": [
                            {
                              "pattern": "tool-generic/bic",
                              "target": "./bic"
                            }
                          ]
                    }'''
                )
*/
                sh 'curl -u${ART_USER}:${ART_PASS} -O ${ART_URL}tool-generic/bic'
                sh 'chmod u+x bic'

                script {
                    openshift.withCluster(env.CLUSTER_NAME) {
                        openshift.withProject(env.PROJECT_NAME) {
                            def imageId = openshift.selector("bc/mvn-greeting").related('builds').objects().last().spec.output.to.name
                            def imagePath = imageId.split('/')[1].replace(":","/")
                            sh "ts=\$(date --rfc-3339=seconds)  && ./bic openshift-mvn ${BUILD_NUMBER} \"\$ts\" ${imagePath}"
                        }
                    }
                }

            }
        } // end stage

    } // end stages
    
}
